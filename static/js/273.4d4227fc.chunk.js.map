{"version":3,"file":"static/js/273.4d4227fc.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundery.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} alt='Error' style={{ display: 'block', width: '200px', height: '200px', objectFit: 'contain', margin: \"0 auto\"}}/>\n    )\n}\n\nexport default ErrorMessage;","import {useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} =  useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id).then(onCharLoaded).then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={updateChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    \n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n                <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n                <div className=\"randomchar__info\">\n                    <p className=\"randomchar__name\">{name}</p>\n                    <p className=\"randomchar__descr\">\n                        {description}\n                    </p>\n                    <div className=\"randomchar__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component , newItemLoading) => {\n    switch(process){\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading': \n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed': \n            return <Component/>;\n        case 'error': \n            return <ErrorMessage/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset).then(onCharListLoaded).then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n\n        if(newCharList.lenght < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={elem => itemRefs.current[i] = elem}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [process]);\n    \n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propsTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import {useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId).then(onCharLoaded).then(() => setProcess('confirmed'));\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    \n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.lenght > 0 ? null : 'There is no comics with this caracter'}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) return null;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundery extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if(this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundery;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './CharSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {error, getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name).then(onCharLoaded).then(() => setProcess('confirmed'));\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { useState } from \"react\";\nimport { Helmet } from 'react-helmet';\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundery from '../errorBoundary/ErrorBoundery';\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\n\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n    \n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                    />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundery>\n                <RandomChar/>\n            </ErrorBoundery>                   \n            <div className=\"char__content\">\n                <ErrorBoundery>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundery>\n                <div>\n                    <ErrorBoundery>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundery>\n                    <ErrorBoundery>\n                        <CharSearchForm/>\n                    </ErrorBoundery>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=30d11bcdc560ddac96b1a8a62b912911';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n    const getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name, \n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character', \n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension, \n            homepage: char.urls[0].url, \n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n    return {\n\t\tgetAllCharacters, \n\t\tgetCharacter, \n\t\tgetCharacterByName, \n\t\tclearError, \n\t\tgetAllComics, \n\t\tgetComic, \n\t\tprocess, \n\t\tsetProcess\n\t};\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'aplication/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n            setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess};\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\n\nconst setContent = (process, Component , data) => {\n    switch(process){\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading': \n            return <Spinner/>;\n        case 'confirmed': \n            return  <Component data={data}/>;\n        case 'error': \n            return <ErrorMessage/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["_jsx","src","img","alt","style","display","width","height","objectFit","margin","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","lenght","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","elem","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","propsTypes","PropTypes","comics","_Fragment","charId","ErrorBoundery","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","state","error","_createClass","value","errorInfo","this","setState","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","selectedChar","Helmet","content","RandomChar","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}